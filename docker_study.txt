docker run ubuntu /bin/echo "Hello world"
各个参数解析：
docker: Docker 的二进制执行文件。
run:与前面的 docker 组合来运行一个容器。
ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。
/bin/echo "Hello world": 在启动的容器里执行的命令

docker run -i -t ubuntu /bin/bash
各个参数解析：
-t:在新容器内指定一个伪终端或终端。
-i:允许你对容器内的标准输入 (STDIN) 进行交互。

启动容器（后台模式）
docker run -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"

确认容器有在运行
docker ps
docker logs 2b1b7a428627    //查看容器内的标准输出
docker logs amazing_cori	//使用容器名称也可以
docker stop naughty_goldwasser   //停止容器
docker start wizardly_chandrasekhar   //已经停止的容器，我们可以使用命令 docker start 来启动

运行一个web应用
docker run -d -P training/webapp python app.py
-d:让容器在后台运行
-P:将容器内部使用的网络端口映射到我们使用的主机上。
0.0.0.0:32768->5000/tcp   32768:为主机端口，5000为docker开放的端口

docker run -d -p 5000:5000 training/webapp python app.py
 -p 参数来设置不一样的端口：
 
docker logs -f flamboyant_meitner   查看容器内部的标准输出。
docker top wizardly_chandrasekhar   查看容器内部运行的进程
docker inspect  返回一个 JSON 文件记录着 Docker 容器的配置和状态信息

docker ps -l   查询最后一次创建的容器
docker rm wizardly_chandrasekhar     删除不需要的容器



docker image ls  //查看本地的docker镜像
docker images  //列出本地主机上的镜像
docker search httpd  //搜索镜像
docker pull training/webapp  # 载入镜像

docker commit -m="has update" -a="yangdian" 7e0b1a3e7dca my_ubuntu_image:0.0.1   通过命令 docker commit来提交修改过的容器副本
各个参数说明：
-m:提交的描述信息
-a:指定镜像作者
7e0b1a3e7dca：容器ID
my_ubuntu_image:0.0.1:指定要创建的目标镜像名


cat Dockerfile 
FROM    centos:6.7
MAINTAINER      Fisher "fisher@sudops.com"
RUN     /bin/echo 'root:123456' |chpasswd
RUN     useradd runoob
RUN     /bin/echo 'runoob:123456' |chpasswd
RUN     /bin/echo -e "LANG=\"en_US.UTF-8\"" >/etc/default/local
EXPOSE  22
EXPOSE  80
CMD     /usr/sbin/sshd -D

第一条FROM，指定使用哪个镜像源
RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。

docker build -t runoob/centos:6.7 .
-t ：指定要创建的目标镜像名
. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径


docker tag 860c279d2fec runoob/centos:dev     镜像添加一个新的标签

docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py    指定容器绑定的网络地址
docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
docker port adoring_stonebraker 5000     docker port 命令可以让我们快捷地查看端口的绑定情况


docker run -d -P --name runoob training/webapp python app.py   使用 --name 标识来命名容器

 
Docker 安装 Nginx
docker search nginx
docker pull nginx
docker run --name my-nginx-test -p 8081:80 -d nginx


mkdir -p /home/yd/test/nginx/www /home/yd/test/nginx/logs /home/yd/test/nginx/conf    
www: 目录将映射为 nginx 容器配置的虚拟目录。
logs: 目录将映射为 nginx 容器的日志目录。
conf: 目录里的配置文件将映射为 nginx 容器的配置文件。
docker cp f9c3fa86a71d:/etc/nginx/nginx.conf /home/yd/test/nginx/conf   //Nginx 默认配置文件到本地当前目录下的 conf 目录
docker run -d -p 8082:80 --name runoob-nginx-test-web -v /home/yd/test/nginx/www:/usr/share/nginx/html -v /home/yd/test/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/yd/test/nginx/logs:/var/log/nginx nginx
命令说明：
-p 8082:80： 将容器的 80 端口映射到主机的 8082 端口。
--name runoob-nginx-test-web：将容器命名为 runoob-nginx-test-web。
-v /home/yd/test/nginx/www:/usr/share/nginx/html：将我们自己创建的 www 目录挂载到容器的 /usr/share/nginx/html。
-v /home/yd/test/nginx/conf/nginx.conf:/etc/nginx/nginx.conf：将我们自己创建的 nginx.conf 挂载到容器的 /etc/nginx/nginx.conf。
-v /home/yd/test/nginx/logs:/var/log/nginx nginx：将我们自己创建的 logs 挂载到容器的 /var/log/nginx。

docker kill -s HUP container-name   如果要重新载入 NGINX 可以使用以下命令发送 HUP 信号到容器：
docker restart container-name   重启 NGINX 容器命令


保存和加载镜像
docker save -o 要保存的文件名  要保存的镜像
docker load < 文件名    从文件载入镜像可以使用Docker load命令。

docker commit <exiting-Container> <hub-user>/<repo-name>[:<tag>]  我们看到这里有个容器，但是我们需要将容器制作成为镜像才可以上传
docker tag <existing-image> <hub-user>/<repo-name>[:<tag>]    如果是已经存在的镜像，如何上传呢？先打标签
docker push<hub-user>/<repo-name>:<tag>   docker push 镜像到docker hub 的仓库


mysql相关：
docker pull yangdianxp/mysql:20190531
docker run -d --name mysql -v /home/yd/docker/mysql_data/mysql:/var/lib/mysql -p 9999:3306 yangdianxp/mysql:20190531
mysql -h 192.168.0.212 -P 9999 -uroot -p123456

redis相关：
docker pull yangdianxp/redis:20190531
docker run -v /home/yd/redis_data:/data -p 8888:6379 -d yangdianxp/redis:20190531 --appendonly yes
redis-cli -h 192.168.0.212 -p 8888






