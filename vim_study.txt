编辑模式：
ZZ: 保存编辑器结果，退出编辑程序回到终端
ZQ  无条件退出 

跳转：

k               上移；
j               下移；
h               左移；
l               右移。

ctrl+f      在文件中前移一页（相当于 page down）；
ctrl+b      在文件中后移一页（相当于 page up）；
[Ctrl] + [d]	屏幕『向下』移动半页
[Ctrl] + [u]	屏幕『向上』移动半页


*         当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；
#         当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；
q/ 显示搜索命令历史的窗口 
q? 显示搜索命令历史的窗口
Shift-k 查找光标所在命令或函数的 man 帮助  
可以在不退出 Vi/Vim 情况下快速查询命令或函数的使用方法；按 q 键退出 man 帮助
(/)     移动到 前/后 句 的开始；
{/}     跳转到 当前/下一个 段落 的开始。
g_      到本行最后一个不是 blank 字符的位置。
fa      到下一个为 a 的字符处，你也可以fs到下一个为s的字符。
t,      到逗号前的第一个字符。逗号可以变成其它字符。
3fa        在当前行查找第三个出现的 a。
F/T        和 f 和 t 一样，只不过是相反方向;
gg       将光标定位到文件第一行起始位置；
G         将光标定位到文件最后一行起始位置；
NG或Ngg  将光标定位到第 N 行的起始位置。

格式化代码
格式化全文指令　　gg=G
自动缩进当前行指令　　==
格式化当前光标接下来的8行　　8=
格式化选定的行　　v 选中需要格式化的代码段 =


H               将光标移到屏幕上的起始行（或最上行）；
M               将光标移到屏幕中间；
L               将光标移到屏幕最后一行。
同样需要注意字母的大小写。H 和 L 命令还可以加数字。如 2H 表示将光标移到屏幕的第２行，3L 表示将光标移到屏幕的倒数第3行。

w               右移光标到下一个字的开头；
e               右移光标到一个字的末尾；
b               左移光标到前一个字的开头；
0               数字０，左移光标到本行的开始；
$               右移光标，到本行的末尾；
^               移动光标，到本行的第一个非空字符。
+	光标移动到非空格符的下一行
-	光标移动到非空格符的上一行
n<space>	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
n<Enter>	n 为数字。光标向下移动 n 行(常用)


搜索匹配
/str1               正向搜索字符串 str1；
n                   继续搜索，找出 str1 字符串下次出现的位置；
N                   继续搜索，找出 str1 字符串上一次出现的位置；
?str2               反向搜索字符串 str2 。

替换和删除
rc               用 c 替换光标所指向的当前字符；
nrc             用 c 替换光标所指向的前 n 个字符；
5rA             用 A 替换光标所指向的前 5 个字符；
x, X	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
xp 				交换光标位置的字符和它右边的字符 
nx               删除光标所指向的前 n 个字符；
3x               删除光标所指向的前 3 个字符；
dw               删除光标右侧的字；
ndw             删除光标右侧的 n 个字；
3dw             删除光标右侧的 3 个字；
db               删除光标左侧的字；
ndb             删除光标左侧的 n 个字；
5db             删除光标左侧的 5 个字；
dd               删除光标所在行，并去除空隙；
ndd             删除（剪切） n 行内容，并去除空隙；
3dd             删除（剪切） 3 行内容，并去除空隙；
d$              从当前光标起删除字符直到行的结束；
d0              从当前光标起删除字符直到行的开始；
d1G	            删除光标所在到第一行的所有数据
dG	            删除光标所在到最后一行的所有数据
dt"				删除所有的内容，直到遇到双引号—— "。
ddp 			交换光标位置的行和它的下一行
J                删除本行的回车符（CR），并和下一行合并。

s               用输入的正文替换光标所指向的字符；
S               删除当前行，并进入插入模式；
ns               用输入的正文替换光标右侧 n 个字符；
nS             删除当前行在内的 n 行，并进入插入模式；
cw             用输入的正文替换光标右侧的字；
ncw           用输入的正文替换光标右侧的 n 个字；
cb             用输入的正文替换光标左侧的字；
ncb              用输入的正文替换光标左侧的 n 个字；
c$               用输入的正文替换从光标开始到本行末尾的所有字符；
c0               用输入的正文替换从本行开头到光标的所有字符。
c	             重复删除多个数据，例如向下删除 10 行，[ 10cj ]

~ 将光标下的字母大小写反向转换 
guw 将光标所在的单词变为小写 
gUw 将光标所在的单词变为大写
guu 光标所在的行所有字符变为小写 
gUU 光标所在的行所有字符变为大写 
g~~ 光标所在的行所有字符大小写反向转换


复制粘贴
p               小写字母 p，将缓冲区的内容粘贴到光标的后面；
P               大写字母 P，将缓冲区的内容粘贴到光标的前面。
3p             → 粘贴文本3次
yy              复制当前行到内存缓冲区；
nyy             复制 n 行内容到内存缓冲区；
5yy             复制 5 行内容到内存缓冲区；
“+y          复制 1 行到操作系统的粘贴板；
“+nyy          复制 n 行到操作系统的粘贴板。
y1G	复制游标所在行到第一行的所有数据
yG	复制游标所在行到最后一行的所有数据
y0	复制光标所在的那个字符到该行行首的所有数据
y$	复制光标所在的那个字符到该行行尾的所有数据
100idesu [ESC]    写desu 100次


插入模式
i           在光标左侧插入正文
a            在光标右侧插入正文
o            在光标所在行的下一行增添新行
O           在光标所在行的上一行增添新行
I            在光标所在行的开头插入
A           在光标所在行的末尾插入
r, R	进入取代模式(Replace mode)：
r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)

字符按键以及Shift组合，输入字符
ENTER，回车键，换行
BACK SPACE，退格键，删除光标前一个字符
DEL，删除键，删除光标后一个字符
方向键，在文本中移动光标
HOME/END，移动光标到行首/行尾
Page Up/Page Down，上/下翻页
Insert，切换光标为输入/替换模式，光标将变成竖线/下划线
ESC，退出输入模式，切换到命令模式



命令模式
:e path_to_file/filename
:w
:w file_temp
: q             在未作修改的情况下退出；
: q!               放弃所有修改，退出编辑程序。
:wq
: n             将光标移到第 n 行
:345                  将光标移到第 345 行
:345w file          将第 345 行写入 file 文件
:3,5w file          将第 3 行至第 5 行写入 file 文件
:1,.w file          将第 1 行至当前行写入 file 文件
:.,$w file          将当前行至最后一行写入 file 文件
:.,.+5w file          从当前行开始将 6 行内容写入 file 文件
:1,$w file          将所有内容写入 file 文件，相当于 :w file 命令
:m,nw >> <file> 将 m 行到 n 行的内容添加到文件 <file> 的末尾

:w                 将编辑的内容写入原始文件，用来保存编辑的中间结果
:wq             将编辑的内容写入原始文件并退出编辑程序（相当于 ZZ 命令）
:w file         将编辑的内容写入 file 文件，保持原有文件的内容不变
:a,bw file       将第 a 行至第 b 行的内容写入 file 文件
:r file         读取 file 文件的内容，插入当前光标所在行的后面
:r!<cmd> 		将命令 <cmd> 的输出结果插入到当前光标所在位置
:e file         编辑新文件 file 代替原有内容
:f file         将当前文件重命名为 file
:f               打印当前文件名称和状态，如文件的行数、光标所在的行号等

:1,$!sort 将文件内的所有内容排序
:%!nl 在所有非空行前加入行号 
:%!nl -ba 在所有行前加入行号

Ctrl-p 自动补全      在编写代码的时候非常有用。比如，输入 prin 后按 Ctrl-p 将自动帮你输入 printf 函数名后面的部分，同时将相关备选函数在底下列出来。
Ctrl-g 显示当前编辑文件名及行数


浏览代码
:E
【 – 】 到上级目录
【D】删除文件（大写）
【R】改文件名（大写）
【s】对文件排序（小写）
【x】执行文件

有两种方法可以可以实现临时退出 Vi/Vim、进入 shell 环境后再回来的要求：
方法一：使用 Ctrl-z 以及 fg 这两个命令组合。
这一解决方法主要利用了 Linux/Unix 的作业机制。具体原理是：Ctrl-z 命令将当前的 Vi/Vim 进程放到后台执行，之后 shell 环境即可为你所用；fg 命令则将位于后台的 Vi/Vim 进程放到前台执行，这样我们就再次进入 Vi/Vim 操作界面并恢复到原先的编辑状态。
方法二：使用行命令 :sh
在 Vi/Vim 的正常模式下输入 :sh即可进入 Linux/Unix shell 环境。在要返回到 Vi/Vim 编辑环境时，输入 exit 命令即可。这两种方法实现机制不一定，但效果一样，都非常快捷有效。


批量添加注释
方法一 ：块选择模式
批量注释：
Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首插入模式输入注释符号如 // 或 #，输入完毕之后，按两下 ESC，Vim 会自动将你选中的所有行首都加上注释，保存退出完成注释。
取消注释：
Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好之后按 d 即可删除注释，ESC 保存退出。
方法二: 替换命令
批量注释。
使用下面命令在指定的行首添加注释。
使用名命令格式： :起始行号,结束行号s/^/注释符/g（注意冒号）。
取消注释：
使用名命令格式： :起始行号,结束行号s/^注释符//g（注意冒号）。
例子：
1、在 10 - 20 行添加 // 注释
:10,20s#^#//#g
2、在 10 - 20 行删除 // 注释
:10,20s#^//##g
3、在 10 - 20 行添加 # 注释
:10,20s/^/#/g
4、在 10 - 20 行删除 # 注释
:10,20s/#//g

区域选择 <action>a<object> 或 <action>i<object>
在visual 模式下，这些命令很强大，其命令格式为
<action>a<object> 和 <action>i<object>
action可以是任何的命令，如 d (删除), y (拷贝), v (可以视模式选择)。
object 可能是： w 一个单词， W 一个以空格为分隔的单词， s 一个句字， p 一个段落。也可以是一个特别的字符："、 '、 )、 }、 ]。
假设你有一个字符串 (map (+) ("foo")).而光标键在第一个 o 的位置。
vi" → 会选择 foo.
va" → 会选择 "foo".
vi) → 会选择 "foo".
va) → 会选择("foo").
v2i) → 会选择 map (+) ("foo")
v2a) → 会选择 (map (+) ("foo"))

字符串搜索
:/str/                正向搜索，将光标移到下一个包含字符串 str 的行
:?str?                反向搜索，将光标移到上一个包含字符串 str 的行
:/str/w file            正向搜索，并将第一个包含字符串 str 的行写入 file 文件
:/str1/,/str2/w file    正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写
/.*HCIp4Addr\&.*strIpPort  搜索HCIp4Addr和strIpPort都匹配的行
/HCIp4Addr\｜strIpPort     搜索HCIp4Addr或strIpPort匹配的行

vim中的正则表达式
:/^struct/           搜索一行正文，这行正文的开头包含 struct 字
^               放在字符串前面，匹配行首的字；
$               放在字符串后面，匹配行尾的字；
\<             匹配一个字的字头；
\>             匹配一个字的字尾；
.               匹配任何单个正文字符；
[str]           匹配 str 中的任何单个字符；
[^str]         匹配任何不在 str 中的单个字符；
[a-b]           匹配 a 到 b 之间的任一字符；
*               匹配前一个字符的 0 次或多次出现；
\               转义后面的字符。


正文替换
:%s/str1/str2/      用字符串 str2 替换行中首次出现的字符串 str1
:s/str1/str2/g      用字符串 str2 替换行中所有出现的字符串 str1
:.,$ s/str1/str2/g  用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1
:1,$ s/str1/str2/g  用字符串 str2 替换正文中所有出现的字符串 str1
:g/str1/s//str2/g    功能同上
:m,ns/str1/str2/g    将从m行到n行的str1替换成str2

`g` 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 `g`，表示只对搜索字符串的首次出现进行替换；`g` 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;
`s` 表示后面跟着一串替换的命令；
`%` 表示替换范围是所有行，即全文。

:%s/str1/&/gn       统计当前文件中字符串 str1 出现的次数，可用替换命令的变形：


删除正文
:d                            删除光标所在行
:3d                          删除 3 行
:.,$d                          删除当前行至正文的末尾
:/str1/,/str2/d              删除从字符串 str1 到 str2 的所有行
:g/^\(.*\)$\n\1$/d              删除连续相同的行，保留最后一行
:g/\%(^\1$\n\)\@<=\(.*\)$/d     删除连续相同的行，保留最开始一行
:g/^\s*$\n\s*$/d                删除连续多个空行，只保留一行空行
:5,20s/^#//g                    删除5到20行开头的 # 注释


恢复文件
Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项。


选项设置
:set option         设置选项 option
autoindent      设置该选项，则正文自动缩进
ignorecase      设置该选项，则忽略规则表达式中大小写字母的区别
number          设置该选项，则显示正文行号
ruler            设置该选项，则在屏幕底部显示光标所在行、列的位置
tabstop        设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8
mk              将选项保存在当前目录的 .exrc 文件中


Shell切换
当处于编辑的对话过程中时，可能需要执行一些Linux命令。如果需要保存当前的结果，退出编辑程序，再执行所需的Linux命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行Linux命令就要省事得多。在Vim中，可以用下面的命令来做到这一点：
:!shell_command   执行完 shell_command 后回到Vim


分屏与标签页
分屏
:split（可用缩写 :sp）            上下分屏；
:vsplit（可用缩写 :vsp）        左右分屏。
vim -On file1 file2...   打开 file1 和 file2 ，垂直分屏
vim -on file1 file2...   打开 file1 和 file2 ，水平分屏
Ctrl+w+h            切换到当前分屏的左边一屏；
Ctrl+w+l            切换到当前分屏的右边一屏；
Ctrl+w+j            切换到当前分屏的下方一屏；
Ctrl+w+k            切换到当前分屏的上方一屏。

Ctrl+W =            让所有的屏都有一样的高度；
Ctrl+W +            增加高度；
Ctrl+W -            减少高度。

分屏同步移动
要让两个分屏中的文件同步移动，很简单，你需要到需要同步移动的两个屏中都输入如下命令（相当于使用“铁锁连环”）：
:set scb
如果你需要解开，那么就输入下面的命令：
:set scb!


标签页
:tabnew              新建一个标签
:tabnew filename     在新建标签页的同时打开一个文件
:Te  全称是 :Texplorer
:tN[ext]                跳转到上一个匹配的标签
:tabN[ext]              跳到上一个标签页
:tabc[lose]             关闭当前标签页
:tabdo                  为每个标签页执行命令
:tabe[dit]              在新标签页里编辑文件
:tabf[ind]              寻找 'path' 里的文件，在新标签页里编辑之
:tabfir[st]             转到第一个标签页
:tabl[ast]              转到最后一个标签页
:tabm[ove]  N           把标签页移到序号为N位置
:tabnew [filename]      在新标签页里编辑文件
:tabn[ext]              转到下一个标签页
:tabo[nly]              关闭所有除了当前标签页以外的所有标签页
:tabp[revious]          转到前一个标签页
:tabr[ewind]            转到第一个标签页
gt   – 到下一个页
gT  – 到前一个页
{i} gt   – i是数字，到指定页，比如：5 gt 就是到第5页

vim -p cool.cpp shell.cpp haoel.cpp
vim -p *.cpp              使用 vim 的 -p 参数来用Tab页的方式打开多个文件
:qa   – 退出全部 
:wqa  -保存全部并退出全部


与外部工具集成
vimdiff file1 file2     对比两个文件的内容
vim -d a.txt b.txt      对比两个文件的内容
:diffsplit abc.txt
:diffpatch filename 
:vert diffsplit abc.txt
:vert diffpatch abc.txt
看完diff，用 :only 回到原本编辑的文件，觉得diff的讨厌颜色还是在哪里，只要用 :diffoff 关闭就好了。
还有个常用的diff中的就是 :diffu ,这个是 :diffupdate 的简写，更新的时候用。


xxd
vim -b filename        以二进制模式在终端里打开一个文件
:%!xxd                  看到二进制模式显示出来的文本
:%!xxd -r               从二进制模式转换到普通模式
:%!xxd -g 1         表示每1个字节为1组 
:%!xxd -g 2         表示每2个字节为1组(默认) 
:%!xxd -g 4         表示每4个字节为1组

vimgrep:
:grep "" %  查找当前文件
:grep "" #  查找交换文件
:grep "" ## 查找vim一次性打开的所有文件，:e 再打开的无效

同时搜索多个字符串
grep -E "13644263032.*KKBToHSBSendTransApi.cpp" ##


Vim配置
1. 设置选项 
:se[t]                  显示所有不同于缺省值的选项。
:se[t] all              显示除了终端设置以外的所有选项





Vim配置
《Vim Options》：
http://vimcdoc.sourceforge.net/doc/options.html#%27completeopt%27

Vim插件
《Vim插件简单介绍》：
http://blog.segmentfault.com/xuelang/1190000000630547
《手把手教你把Vim改装成一个IDE编程环境(图文)》：
http://blog.csdn.net/wooin/article/details/1858917
《将Vim改造为强大的IDE》：
http://www.cnblogs.com/zhangsf/archive/2013/06/13/3134409.html

Vim官方文档：http://vimdoc.sourceforge.net/
Vim中文用户手册7_3.pdf ：http://pan.baidu.com/s/1jGzbTBo














































