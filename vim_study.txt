编辑模式：
ZZ: 保存编辑器结果，退出编辑程序回到终端

跳转：

k               上移；
j               下移；
h               左移；
l               右移。

ctrl+f      在文件中前移一页（相当于 page down）；
ctrl+b      在文件中后移一页（相当于 page up）；

*         当光标停留在一个单词上，* 键会在文件内搜索该单词，并跳转到下一处；
#         当光标停留在一个单词上，# 在文件内搜索该单词，并跳转到上一处；
(/)     移动到 前/后 句 的开始；
{/}     跳转到 当前/下一个 段落 的开始。
g_      到本行最后一个不是 blank 字符的位置。
fa      到下一个为 a 的字符处，你也可以fs到下一个为s的字符。
t,      到逗号前的第一个字符。逗号可以变成其它字符。
3fa        在当前行查找第三个出现的 a。
F/T        和 f 和 t 一样，只不过是相反方向;
gg       将光标定位到文件第一行起始位置；
G         将光标定位到文件最后一行起始位置；
NG或Ngg  将光标定位到第 N 行的起始位置。

H               将光标移到屏幕上的起始行（或最上行）；
M               将光标移到屏幕中间；
L               将光标移到屏幕最后一行。
同样需要注意字母的大小写。H 和 L 命令还可以加数字。如 2H 表示将光标移到屏幕的第２行，3L 表示将光标移到屏幕的倒数第3行。

w               右移光标到下一个字的开头；
e               右移光标到一个字的末尾；
b               左移光标到前一个字的开头；
0               数字０，左移光标到本行的开始；
$               右移光标，到本行的末尾；
^               移动光标，到本行的第一个非空字符。


搜索匹配
/str1               正向搜索字符串 str1；
n                   继续搜索，找出 str1 字符串下次出现的位置；
N                   继续搜索，找出 str1 字符串上一次出现的位置；
?str2               反向搜索字符串 str2 。

替换和删除
rc               用 c 替换光标所指向的当前字符；
nrc             用 c 替换光标所指向的前 n 个字符；
5rA             用 A 替换光标所指向的前 5 个字符；
x                 删除光标所指向的当前字符；
nx               删除光标所指向的前 n 个字符；
3x               删除光标所指向的前 3 个字符；
dw               删除光标右侧的字；
ndw             删除光标右侧的 n 个字；
3dw             删除光标右侧的 3 个字；
db               删除光标左侧的字；
ndb             删除光标左侧的 n 个字；
5db             删除光标左侧的 5 个字；
dd               删除光标所在行，并去除空隙；
ndd             删除（剪切） n 行内容，并去除空隙；
3dd             删除（剪切） 3 行内容，并去除空隙；
d$              从当前光标起删除字符直到行的结束；
d0              从当前光标起删除字符直到行的开始；
J                删除本行的回车符（CR），并和下一行合并。

s               用输入的正文替换光标所指向的字符；
S               删除当前行，并进入插入模式；
ns               用输入的正文替换光标右侧 n 个字符；
nS             删除当前行在内的 n 行，并进入插入模式；
cw             用输入的正文替换光标右侧的字；
cW             用输入的正文替换从光标到行尾的所有字符（同 c$ )；
ncw           用输入的正文替换光标右侧的 n 个字；
cb             用输入的正文替换光标左侧的字；
ncb              用输入的正文替换光标左侧的 n 个字；
cd               用输入的正文替换光标的所在行；
ncd              用输入的正文替换光标下面的 n 行；
c$               用输入的正文替换从光标开始到本行末尾的所有字符；
c0               用输入的正文替换从本行开头到光标的所有字符。


复制粘贴
p               小写字母 p，将缓冲区的内容粘贴到光标的后面；
P               大写字母 P，将缓冲区的内容粘贴到光标的前面。
yy              复制当前行到内存缓冲区；
nyy             复制 n 行内容到内存缓冲区；
5yy             复制 5 行内容到内存缓冲区；
“+y          复制 1 行到操作系统的粘贴板；
“+nyy          复制 n 行到操作系统的粘贴板。


插入模式
i           在光标左侧插入正文
a            在光标右侧插入正文
o            在光标所在行的下一行增添新行
O           在光标所在行的上一行增添新行
I            在光标所在行的开头插入
A           在光标所在行的末尾插入


命令模式
:e path_to_file/filename
:w
:w file_temp
: q             在未作修改的情况下退出；
: q!               放弃所有修改，退出编辑程序。
:wq
: n             将光标移到第 n 行
:345                  将光标移到第 345 行
:345w file          将第 345 行写入 file 文件
:3,5w file          将第 3 行至第 5 行写入 file 文件
:1,.w file          将第 1 行至当前行写入 file 文件
:.,$w file          将当前行至最后一行写入 file 文件
:.,.+5w file          从当前行开始将 6 行内容写入 file 文件
:1,$w file          将所有内容写入 file 文件，相当于 :w file 命令

:w                 将编辑的内容写入原始文件，用来保存编辑的中间结果
:wq             将编辑的内容写入原始文件并退出编辑程序（相当于 ZZ 命令）
:w file         将编辑的内容写入 file 文件，保持原有文件的内容不变
:a,bw file       将第 a 行至第 b 行的内容写入 file 文件
:r file         读取 file 文件的内容，插入当前光标所在行的后面
:e file         编辑新文件 file 代替原有内容
:f file         将当前文件重命名为 file
:f               打印当前文件名称和状态，如文件的行数、光标所在的行号等


字符串搜索
:/str/                正向搜索，将光标移到下一个包含字符串 str 的行
:?str?                反向搜索，将光标移到上一个包含字符串 str 的行
:/str/w file            正向搜索，并将第一个包含字符串 str 的行写入 file 文件
:/str1/,/str2/w file    正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写

vim中的正则表达式
:/^struct/           搜索一行正文，这行正文的开头包含 struct 字
^               放在字符串前面，匹配行首的字；
$               放在字符串后面，匹配行尾的字；
\<             匹配一个字的字头；
\>             匹配一个字的字尾；
.               匹配任何单个正文字符；
[str]           匹配 str 中的任何单个字符；
[^str]         匹配任何不在 str 中的单个字符；
[a-b]           匹配 a 到 b 之间的任一字符；
*               匹配前一个字符的 0 次或多次出现；
\               转义后面的字符。


正文替换
:%s/str1/str2/      用字符串 str2 替换行中首次出现的字符串 str1
:s/str1/str2/g      用字符串 str2 替换行中所有出现的字符串 str1
:.,$ s/str1/str2/g  用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1
:1,$ s/str1/str2/g  用字符串 str2 替换正文中所有出现的字符串 str1
:g/str1/s//str2/g    功能同上
:m,ns/str1/str2/g    将从m行到n行的str1替换成str2

`g` 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 `g`，表示只对搜索字符串的首次出现进行替换；`g` 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作;
`s` 表示后面跟着一串替换的命令；
`%` 表示替换范围是所有行，即全文。

:%s/str1/&/gn       统计当前文件中字符串 str1 出现的次数，可用替换命令的变形：


删除正文
:d                            删除光标所在行
:3d                          删除 3 行
:.,$d                          删除当前行至正文的末尾
:/str1/,/str2/d              删除从字符串 str1 到 str2 的所有行
:g/^\(.*\)$\n\1$/d              删除连续相同的行，保留最后一行
:g/\%(^\1$\n\)\@<=\(.*\)$/d     删除连续相同的行，保留最开始一行
:g/^\s*$\n\s*$/d                删除连续多个空行，只保留一行空行
:5,20s/^#//g                    删除5到20行开头的 # 注释


恢复文件
Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项。


选项设置
:set option         设置选项 option
autoindent      设置该选项，则正文自动缩进
ignorecase      设置该选项，则忽略规则表达式中大小写字母的区别
number          设置该选项，则显示正文行号
ruler            设置该选项，则在屏幕底部显示光标所在行、列的位置
tabstop        设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8
mk              将选项保存在当前目录的 .exrc 文件中


Shell切换
当处于编辑的对话过程中时，可能需要执行一些Linux命令。如果需要保存当前的结果，退出编辑程序，再执行所需的Linux命令，然后再回头继续编辑过程，就显得十分累赘。如果能在编辑的环境中运行Linux命令就要省事得多。在Vim中，可以用下面的命令来做到这一点：
:!shell_command   执行完 shell_command 后回到Vim


分屏与标签页
分屏












































