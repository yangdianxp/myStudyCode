git命令：
git push -u origin dev
git remote add origin git@github.com:yangdianxp/mygit.git
git checkout -b dev
git branch
git add readme.txt  //把文件放入暂存区
git commit -m "branch test"  //git commit -v 将修改差异的每一行都包含到注释中来
git checkout master
git merge dev
git branch -d dev
git log --graph --pretty=oneline --abbrev-commit
git clone address
git status //确定哪些文件当前处于什么状态
git diff //查看具体修改，比较工作目录中当前文件和暂存区域快照之间的差异
git diff --cached  git diff --staged //已经暂存起来的文件和上次提交时的快照之间的差异
git commit -a  // 自动把所有已经跟踪过的文件暂存起来一并提交
git rm //从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件。
git rm --cached readme.txt //从git仓库中删除，但仍保留在当前工作目录中
git rm log/\*.log  //不递归匹配
git rm \*~ //递归匹配
git mv file_from file_to //对文件改名
git log //查看提交历史
git log -p -2 //-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新 --word-diff单词层面的对比 -U1更改上下文行数 --stat仅显示简要的增改行数据统计


cat .gitignore
*.[oa]
*~
//列出要忽略的文件模式 
第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件
第二行告诉 Git 忽略所有以波浪符（~）结尾的文件

文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。

例子：
# 此为注释 – 将被 Git 忽略
# 忽略所有 .a 结尾的文件
*.a
# 但 lib.a 除外
!lib.a
# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
# 忽略 build/ 目录下的所有文件
build/
# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# 忽略 doc/ 目录下所有扩展名为 txt 的文件
doc/**/*.txt

