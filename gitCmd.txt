git命令：
git push [remote-name] [branch-name]  //本地仓库中的数据推送到远程仓库
git push origin master
git push -u origin dev
git remote add origin git@github.com:yangdianxp/mygit.git
git remote  //列出每个远程库的简短名字
git remote -v //显示远程库的地址
git remote add [shortname] [url]  //
git remote add pb git://github.com/paulboone/ticgit.git //添加一个新的远程仓库
git remote show [remote-name]  //查看某个远程仓库的详细信息
git ls-remote (remote) //来显式地获得远程引用的完整列表
git remote rename //修改某个远程仓库在本地的简称
git remote rm  //删除远程仓库
git fetch [remote-name]
git fetch pb //抓取所有 Paul 有的，但本地仓库没有的信息
git fetch origin //抓取远程仓库中的所有更新，只是将远端的数据接到本地仓库，并不自动合并到当前工作分支，要手工合并
git pull  //从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支
git checkout -b dev
git branch
git add readme.txt  //把文件放入暂存区
git commit -m "branch test"  //git commit -v 将修改差异的每一行都包含到注释中来
git commit --amend  //撤消提交 此命令将使用当前的暂存区域快照提交。
git reset HEAD benchmarks.rb  //取消暂存
git checkout master
git checkout -- benchmarks.rb //取消对文件的修改
git merge dev
git branch -d dev
git log --graph --pretty=oneline --abbrev-commit
git clone address
git clone -o booyah //默认的远程分支名字将会是 booyah/master
git status //确定哪些文件当前处于什么状态
git diff //查看具体修改，比较工作目录中当前文件和暂存区域快照之间的差异
git diff --cached  git diff --staged //已经暂存起来的文件和上次提交时的快照之间的差异
git commit -a  // 自动把所有已经跟踪过的文件暂存起来一并提交
git rm //从已跟踪文件清单中移除，并连带从工作目录中删除指定的文件。
git rm --cached readme.txt //从git仓库中删除，但仍保留在当前工作目录中
git rm log/\*.log  //不递归匹配
git rm \*~ //递归匹配
git mv file_from file_to //对文件改名
git log //查看提交历史
git log -p -2 //-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新 --word-diff单词层面的对比 -U1更改上下文行数 --stat仅显示简要的增改行数据统计 --pretty指定使用完全不同于默认格式的方式展示提交历史（oneline， short，full 和 fuller  git log --pretty=oneline）
git log --pretty=format:"%h - %an, %ar : %s"
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明
用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形

-p	按补丁格式显示每个更新之间的差异。
--word-diff	按 word diff 格式显示差异。
--stat	显示每次更新的文件修改统计信息。
--shortstat	只显示 --stat 中最后的行数修改添加移除统计。
--name-only	仅在提交信息后显示已修改的文件清单。
--name-status	显示新增、修改、删除的文件清单。
--abbrev-commit	仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date	使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph	显示 ASCII 图形表示的分支合并历史。
--pretty	使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
--oneline	--pretty=oneline --abbrev-commit 的简化用法。
--since 和 --until  按时间做限制  git log --since=2.weeks //最近两周的提交 （“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。

还可以给出若干搜索条件，列出符合的提交。用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）

git log path //查询某个文件或目录的历史提交

-(n)	仅显示最近的 n 条提交
--since, --after	仅显示指定时间之后的提交。
--until, --before	仅显示指定时间之前的提交。
--author	仅显示指定作者相关的提交。
--committer	仅显示指定提交者相关的提交。

实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：
git log --pretty="%h - %s" --author=gitster --since="2008-10-01" --before="2008-11-01" --no-merges -- t/

gitk  //启动图形化界面，查看历史提交

git tag  //列出现有标签的

git branch  //列出当前所有分支的清单
git branch -v //查看每一个分支的最后一次提交
git branch --merged //查看哪些分支已经合并到当前分支
git branch --no-merged //查看所有包含未合并工作的分支
git branch testing  //创建一个新的分支指针
git checkout testing  //切换分支
git checkout -b testing  //新建并切换到分支
git checkout master
git merge testing   //切换到master分支，合并testing到master分支，如何合并有冲突，冲突解决之后，要用git add重新加入到暂存区
git branch -d testing //删除分支
git mergetool //调用一个可视化的合并工具并引导你解决所有冲突


cat .gitignore
*.[oa]
*~
//列出要忽略的文件模式 
第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件
第二行告诉 Git 忽略所有以波浪符（~）结尾的文件

文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。
匹配模式最后跟反斜杠（/）说明要忽略的是目录。
要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。

例子：
# 此为注释 – 将被 Git 忽略
# 忽略所有 .a 结尾的文件
*.a
# 但 lib.a 除外
!lib.a
# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
# 忽略 build/ 目录下的所有文件
build/
# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# 忽略 doc/ 目录下所有扩展名为 txt 的文件
doc/**/*.txt

